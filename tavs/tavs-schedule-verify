#!/usr/bin/python

# tavs-schedule-verify
# -----------------------
# 
# Part of the TAVS suite.
#
# Script to query OverWatch and, if necessary, run a verify.
#
# Original author: James Thorne <james.thorne@stfc.ac.uk>
# Update for LSI RAID cards and Python conversion: George Christian
#
# (c) Science and Technology Facilities Council

import sys
import os
import time
import psycopg2
import optparse
import socket

### CONSTANTS ###

BINDIR = "/usr/local/sbin"
START_SCRIPT = BINDIR + "/tavs-start-verifies"

### PROGRAM ###

def main():
  ### LOCAL VARIABLES ###
  today = time.strftime("%d%m%Y")

  # User defined variables
  hostname = ""
  username = ""
  password = ""
  dbname = ""
  machineName = ""
  port = ""
  force = False
  logName = "/var/log/tavs.log"
  diskFraction = 5
  DEBUG = False
  noSleep = False
  verifyLimit = 0

  # Read the configuration file
  filepath = ""
  # Check if the file exists
  if os.path.isfile("/etc/sysconfig/pgsql/pg_service.conf"):
    filepath = "/etc/sysconfig/pgsql/pg_service.conf"
  elif os.path.isfile("pg_service.conf"):
    filepath = "pg_service.conf"
  else:
    print("Error: Can't find configuration file in /etc/sysconfig/pgsql/pg_service.conf")
    exit(1)

  config = open(filepath, "r")
  for line in config:
    if line[0].strip() == '#' or line[0].strip() == '[': continue
    entry = line.split('=', 1)
    
    if len(entry) == 1:
      continue

    arg = entry[0].strip()
    val = entry[1].strip(" \n")
    # Strip is used to remove all spaces and carriage return characters
    if arg == "host": hostname = val
    elif arg == "user": username = val
    elif arg == "password": password = val
    elif arg == "port": port = val
    elif arg == "dbname": dbname = val
    elif arg == "diskfrac": diskFraction = int(val)
    elif arg == "log": logName = val

  config.close()

  # Open log file
  logfile = open(logName, "a+")

  # get command line options
  #   -d             : debug
  #   -f             : force verify and update DB.  Useful after intervention.
  #   -S             : Do not sleep before contacting DB.
  #   -n             : The machine to run verifies on
  #   -h, -?         : display usage and exit
  parser = optparse.OptionParser()
  parser.add_option("-d", action="store_true", dest="DEBUG", default=False, help="Enable debug output")
  parser.add_option("-f", action="store_true", dest="force", default=False, help="Force a consistency check on the specified machine")
  parser.add_option("-S", action="store_true", dest="nosleep", default=False, help="Connect to the database without sleeping first")
  parser.add_option("-n", action="store", dest="machineName", default="", help="Specifies the name of the current machine. This is the short host name in magDB.")
  (options, args) = parser.parse_args()

  if options.DEBUG:
    DEBUG = True
  if options.force:
    force = True
  if options.nosleep:
    noSleep = True
  
  machineName = options.machineName

  # If the user has not specified a machine name then try to derive it from
  # the host name.
  if machineName == "":
    machineName = socket.gethostname().split(".", 1)[0]

  debug("Today's date is %s" % time.strftime("%d/%m/%Y"), DEBUG)
  debug("My hostname is %s" % machineName, DEBUG)

  if noSleep == False:
    # If we're running normally, we need to sleep for a while to avoid overloading
    # the DB, unless the -S option was specified (no sleep).
    debug("Sleeping for 5 seconds to avoid loading the DB...", DEBUG)
    time.sleep(5)

  # Connect to the database
  debug("Connecting to the database", DEBUG)
  connection = psycopg2.connect("dbname=%s user=%s password=%s host=%s port=%s" % (dbname, username, password, hostname, port))
  cur = connection.cursor()

  # If force has been specified then run a check now and exit
  if force == True:
    cur.execute('SELECT "machineName", "storageSystemId" FROM "vCastor5" WHERE "machineName" = %s', (machineName,))
    storageSystemId = cur.fetchone()[1] # The storageSystemId is the second entry
    verify(cur, machineName, storageSystemId, "Verify forced", logfile, DEBUG)
    exit(0)

  debug("Disk Fraction: %i" % diskFraction, DEBUG)
  cur.execute('SELECT ( COUNT ("diskPool") / %s ) AS "verifyLimit" FROM "vCastor5" WHERE "diskPool" = (SELECT "diskPool" FROM "vCastor5" WHERE "machineName" = %s);', (diskFraction, machineName))
  verifyLimit = cur.fetchone()[0]

  debug("verifyLimit: %i" % verifyLimit, DEBUG)

  # get result and set the limit on the number of concurrent verifies
  # verifyLimit must be at least 1
  if verifyLimit == 0:
    debug("verifyLimit is zero, shifting to 1", DEBUG)
    verifyLimit += 1

  cur.execute('SELECT "machineName", "diskPool", "lastVerified", "storageSystemId" FROM "vCastor5" WHERE "diskPool" = (SELECT "diskPool" FROM "vCastor5" WHERE "machineName" = %s AND "currentStatus" <> \'Intervention\' AND "currentStatus" <> \'Decomissioned\' AND %s - "lastVerified" > 28 ORDER BY "lastVerified" ASC LIMIT %s);', (machineName, time.strftime("%Y%m%d"), verifyLimit))

  if (cur.rowcount) == 0:
    debug("This machine is not currently in need of verifying", DEBUG)

  for i in range(cur.rowcount - 1):
    record = cur.fetchone()
    oldHost = record[0]
    if oldHost == machineName:
      verify(cur, machineName, record[3], "Host has not been verified in over 28 days", logfile, DEBUG)

  # Close open connections
  connection.commit()   # We must commit our changes otherwise psycopg just reverts them on close!
  connection.close()
  logfile.close()

### SUBROUTINES ###

def verify(cur, machineName, storageSystemId, reason, logfile, DEBUG):
  debug(reason, DEBUG)
  debug("Time to verify", DEBUG)
  debug("Starting verifies:\t%s" % START_SCRIPT, DEBUG)
  # send info on decision to the log file
  writeToLog("%s" % reason, logfile)
  # execute the verify command
  retVal = os.system(START_SCRIPT)

  # If the verify was successful then update the 'storageSystems' table with the current date
  if retVal == 0:
    debug("Started verifies on %s" % machineName, DEBUG)
    writeToLog("Started verifies on %s" % machineName, logfile)

    cur.execute('UPDATE "storageSystems" SET "lastVerified" = CURRENT_DATE WHERE "id" = %s', (storageSystemId,))
    debug("\n%s\n" % cur.statusmessage, DEBUG)
  else:
    gracefulDeath("Error starting verifies on %s" % machineName, logfile, 1)

def usage():
  print "tavs-schedule-verify usage:\n"
  print "  -d             : turn on debug messages\n"
  print "  -f             : force verify and update DB.  Useful after intervention.\n"
  print "  -n <host name> : short host name (optional, script will guess it otherwise)\n"
  print "  -S             : Do not sleep before contacting DB.  Use when run interactively.\n"
  print "  -h, -?         : display this usage message and exit.\n\n"

def debug(msg, DEBUG):
  if ( DEBUG ):
    sys.stderr.write("%s\n" % msg)

def gracefulDeath(errorMsg, logfile, exitCode):
  # print to STDERR
  sys.stderr.write("----\n")
  sys.stderr.write("%s\n" % errorMsg)
  sys.stderr.write("----\n")
  writeToLog('ERROR: ' + errorMsg, logfile);
  sys.exit(1)

def writeToLog(msg, logfile):
  logfile.write("[%s]: %s\n" % (time.strftime("%d/%m/%Y"), msg))

if __name__ == "__main__":
  main()
